name: Validation

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main, '2.2', '2.1', '1.3' ]
    paths-ignore:
      - 'hilla-logo.svg'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'packages/**/README.md'
  pull_request_target:
    paths-ignore:
      - 'hilla-logo.svg'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'packages/**/README.md'
  workflow_dispatch:

jobs:
  init:
    name: Build Java and npm for other tasks
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build TypeScript
        run: npm run build
      - name: Build Java
        run: mvn install -B -ntp -DskipTests -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -pl '!:hilla-gradle-plugin'
      - name: Save Workspace
        run: |
          tar cf workspace.tar -C ~/ $( \
            mvn -q -DskipTests \
              -Dexec.executable='echo' \
              -Dexec.args='${project.groupId}:${project.artifactId}' \
              -Dexec.skip='${maven.deploy.skip}' \
              exec:exec \
            | perl -pe 's/\.(?=.*:)/\//g' \
            | sed -e 's/:/\//' \
            | sed -e 's/^/.m2\/repository\//' \
          )
          find packages/java -type d -name target -print0 | xargs -0 tar rf workspace.tar
          tar rf workspace.tar $(find packages/ts -name node_modules -prune -o -print | git check-ignore --stdin)
      - uses: actions/upload-artifact@v3
        with:
          name: saved-workspace
          path: workspace.tar
          retention-days: 1
          if-no-files-found: error

  check-style:
    needs: init
    name: Check style
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v3
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Validate Java Format
        run: mvn -B formatter:validate
      - name: Lint TypeScript
        run: npm run check

  test-java:
    needs: init
    name: Test Java
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v3
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Test
        run: mvn -B -am -P\!it-modules verify
      - name: Collect Coverage
        run: |
          COVFILES=$(find packages/java -wholename 'target/site/jacoco/jacoco.xml' | tr '\n' ',' | sed '$s/,$//')
          echo "COVFILES=$COVFILES" >> $GITHUB_ENV
      - name: Send Coverage to Codecov
        if: ${{ env.COVFILES != '' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVFILES }}
          flags: unittests
          fail_ci_if_error: true
          root_dir: ${{ github.workspace }}

  test-typescript:
    needs: init
    name: Test TypeScript
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false

    steps:
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Checkout Project Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v3
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Test
        run: npm run test:coverage
        env:
          CI: true
      - name: Collect Coverage
        run: |
          COVFILES=$(find packages/ts -wholename '*/.coverage/lcov.info' | tr '\n' ',' | sed '$s/,$//')
          echo "COVFILES=$COVFILES" >> $GITHUB_ENV
      - name: Send Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVFILES }}
          flags: unittests
          fail_ci_if_error: true
          root_dir: ${{ github.workspace }}

  test-it:
    needs:
      - init
    name: ITs
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            it-modules: group-1
          - os: ubuntu-latest
            it-modules: group-2
          - os: windows-latest
            it-modules: some
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v3
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo $TB_LICENSE | cut -d / -f1`'","proKey":"'`echo $TB_LICENSE | cut -d / -f2`'"}' > ~/.vaadin/proKey
      - name: Verify
        run: |
          (
            cd packages/java/tests && \
            mvn -B -am -ntp -fae \
              -Dfailsafe.forkCount=4 \
              -Dcom.vaadin.testbench.Parameters.testsInParallel=5 \
              -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 \
              -Dmaven.wagon.http.retryHandler.count=3 \
              -P\!it-modules \
              -Pit-modules-${{ matrix.it-modules }} \
              verify
          )
      - uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: saved-outputs
          path: |
            packages/java/tests/**/target/*-reports/*
            packages/java/tests/**/error-screenshots/*.png

  test-gradle:
    needs:
      - init
    name: Gradle tests
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v3
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo $TB_LICENSE | cut -d / -f1`'","proKey":"'`echo $TB_LICENSE | cut -d / -f2`'"}' > ~/.vaadin/proKey
      - name: Test gradle-plugin's functional tests
        run: ./packages/java/gradle-plugin/gradlew -p packages/java/gradle-plugin functionalTest
      - name: Gradle ITs
        run: ./packages/java/tests/gradle/single-module-tests/gradlew -p packages/java/tests/gradle/single-module-tests test
      - uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: saved-outputs-gradle
          path: |
            packages/java/tests/**/target/*-reports/*
            packages/java/tests/**/error-screenshots/*.png

  test-all:
    name: Tests Summary
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - test-it
    steps:
      - name: Fail if test jobs did not succeed
        if: ${{ needs.test-it.result != 'success' }}
        run: exit 1
